import XCTest
@testable import SyntraTools

final class FormatterTests: XCTestCase {
    func testCanonicalAssessmentFormatting() throws {
        let input: [String: Any] = [
            "posterior": [
                "diseaseA": 0.123456,
                "diseaseB": 0.876544
            ],
            "risk_level": "moderate",
            "factors": [
                ["name": "age", "weight": 0.75, "explanation": "older age increases risk"],
                ["name": "comorbidity", "weight": "0.5", "explanation": "existing conditions"]
            ],
            "note": "generated by test"
        ]
        let out = formatAssessmentOutput(input)
        let expected = """
Probability / Posterior:
  diseaseA: 0.123
  diseaseB: 0.877
Risk level: moderate
Factors:
  - age (impact: 0.75)
    older age increases risk
  - comorbidity (impact: 0.5)
    existing conditions
Details:
  note: generated by test
"""
        XCTAssertEqual(out, expected)
    }

    func testFallbackForPlainString() throws {
        let inStr = "plain message"
        let out = formatAssessmentOutput(inStr)
        XCTAssertEqual(out, "plain message")
    }

    func testUnknownShapeSortedKeys() throws {
        let input: [String: Any] = [
            "b": 1,
            "A": 2
        ]
        let out = formatAssessmentOutput(input)
        let expected = """
A: 2
b: 1
"""
        XCTAssertEqual(out, expected)
    }

    func testLargeFactorListFormattingCountsAllFactors() throws {
        var factors: [[String: Any]] = []
        for i in 0..<50 {
            factors.append([
                "name": "f\(i)",
                "weight": Double(i) / 100.0,
                "explanation": "factor \(i)"
            ])
        }
        let input: [String: Any] = ["factors": factors]
        let out = formatAssessmentOutput(input)
        // Ensure header present
        XCTAssertTrue(out.contains("Factors:"))
        // Count occurrences of factor lines ("  - ")
        let count = out.components(separatedBy: "\n  - ").count - 1
        XCTAssertEqual(count, factors.count)
    }
}
